apply plugin: 'com.blogspot.toomuchcoding.testprofiler'

configurations {
    smokeTestCompile.extendsFrom testCompile
    smokeTestRuntime.extendsFrom testRuntime
}

sourceSets {

    smokeTest {
        groovy.srcDir file('src/test-smoke/groovy')
        resources.srcDir file('src/test-smoke/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.smokeTestCompile
        runtimeClasspath = output + compileClasspath + configurations.smokeTestRuntime
    }
}

test {
    jvmArgs applicationDefaultJvmArgs + '-Xmx512m'
    testLogging {
        exceptionFormat = 'full'
    }
    exclude '**/*UISpec.*'
}

task guiTest(type: Test, group: 'verification') {
    description "Runs the acceptance GUI tests with Geb."
    jvmArgs applicationDefaultJvmArgs
    testLogging {
        exceptionFormat = 'full'
    }
    include '**/*UISpec.*'

    reports.html {
        destination = file("${reporting.baseDir}/guiTests")
    }
}

task smokeTest(type: Test, group: 'verification') {
    description 'Executes smoke tests on real application instance (-DsmokeTestAppUrl=http://<app-host>:<port>)'
    testClassesDir = sourceSets.smokeTest.output.classesDir
    classpath = sourceSets.smokeTest.runtimeClasspath
    outputs.upToDateWhen { false }
    systemProperties['smokeTestAppUrl'] = System.properties['smokeTestAppUrl'] ?: 'http://localhost:8080'
    reports.html.destination = file("${reporting.baseDir}/smokeTest")
    reports.junitXml.destination = file("${testResultsDir}/smokeTest")
}

if (project.hasProperty('coverage')) {
    apply plugin: 'codenarc'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'
    apply plugin: 'com.github.kt3k.coveralls'

    jacoco {
        toolVersion = '0.7.6.201602180812'
    }

    jacocoTestReport {
        group = 'reporting'
        description = 'Generate Jacoco coverage reports after running tests.'
        dependsOn test
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }

    codenarc {
        configFile = file('config/codenarc/rules.groovy')
        maxPriority1Violations = 0
        maxPriority2Violations = 6
        maxPriority3Violations = 10
        reportFormat = 'xml'
        ignoreFailures = true
    }

    dependencies {
        codenarc 'org.codenarc:CodeNarc:0.25.1'
    }

    test {
        jacoco {
            excludes = ['*Configuration']
        }
    }

    sonarqube {
        properties {
            property 'sonar.groovy.jacoco.reportPath', "${project.buildDir}/jacoco/test.exec"
            //only for projects using Groovy in production code
        }
    }
}

testprofiler {
    minTestThreshold = 100

    buildBreaker {
        maxTestThreshold = project.hasProperty('maxTestThreshold') ? project.property('maxTestThreshold') : 3 * 60 * 1000
        ifTestsExceedMaxThreshold {
            displayWarning()
        }
    }
}
